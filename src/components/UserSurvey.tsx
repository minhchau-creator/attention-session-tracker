import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Slider } from "@/components/ui/slider";
import { Badge } from "@/components/ui/badge";

interface SurveyData {
  maxFocusTime: number;
  wantToChange: string;
  distractionFactors: string[];
  customDistraction: string;
}

interface UserSurveyProps {
  onComplete: (data: SurveyData) => void;
}

const commonDistractions = [
  "M·∫°ng x√£ h·ªôi", "ƒêi·ªán tho·∫°i", "Ti·∫øng ·ªìn", "Bu·ªìn ng·ªß", 
  "CƒÉng th·∫≥ng", "ƒê√≥i", "Suy nghƒ© lung tung", "Email/tin nh·∫Øn"
];

export const UserSurvey: React.FC<UserSurveyProps> = ({ onComplete }) => {
  const [data, setData] = useState<SurveyData>({
    maxFocusTime: 30,
    wantToChange: "",
    distractionFactors: [],
    customDistraction: ""
  });

  const handleDistractionToggle = (distraction: string) => {
    setData(prev => ({
      ...prev,
      distractionFactors: prev.distractionFactors.includes(distraction)
        ? prev.distractionFactors.filter(d => d !== distraction)
        : [...prev.distractionFactors, distraction]
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Add custom distraction if provided
    const finalData = {
      ...data,
      distractionFactors: data.customDistraction 
        ? [...data.distractionFactors, data.customDistraction]
        : data.distractionFactors
    };
    
    // Save to localStorage
    localStorage.setItem("userSurvey", JSON.stringify(finalData));
    onComplete(finalData);
  };

  const isValid = data.wantToChange.length > 0 && data.distractionFactors.length > 0;

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-violet-50 to-violet-100 p-4">
      <Card className="w-full max-w-2xl mx-auto">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl font-bold">
            üß† Kh·∫£o s√°t kh·∫£ nƒÉng h·ªçc t·∫≠p
          </CardTitle>
          <p className="text-muted-foreground">
            Gi√∫p ch√∫ng t√¥i hi·ªÉu r√µ h∆°n v·ªÅ kh·∫£ nƒÉng t·∫≠p trung c·ªßa b·∫°n
          </p>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Max Focus Time */}
            <div className="space-y-3">
              <Label className="text-base font-medium">
                Th·ªùi gian t·∫≠p trung t·ªëi ƒëa c·ªßa b·∫°n hi·ªán t·∫°i?
              </Label>
              <div className="px-3">
                <Slider
                  value={[data.maxFocusTime]}
                  onValueChange={(value) => setData(prev => ({ ...prev, maxFocusTime: value[0] }))}
                  max={180}
                  min={5}
                  step={5}
                  className="w-full"
                />
                <div className="flex justify-between text-sm text-muted-foreground mt-1">
                  <span>5 ph√∫t</span>
                  <span className="font-medium text-primary">{data.maxFocusTime} ph√∫t</span>
                  <span>3 gi·ªù</span>
                </div>
              </div>
            </div>

            {/* What to change */}
            <div className="space-y-2">
              <Label htmlFor="wantToChange" className="text-base font-medium">
                B·∫°n mu·ªën thay ƒë·ªïi ƒëi·ªÅu g√¨ trong vi·ªác h·ªçc t·∫≠p?
              </Label>
              <Textarea
                id="wantToChange"
                placeholder="VD: Mu·ªën h·ªçc l√¢u h∆°n, t·∫≠p trung s√¢u h∆°n, √≠t m·∫•t t·∫≠p trung..."
                value={data.wantToChange}
                onChange={(e) => setData(prev => ({ ...prev, wantToChange: e.target.value }))}
                rows={3}
                required
              />
            </div>

            {/* Distraction factors */}
            <div className="space-y-3">
              <Label className="text-base font-medium">
                ƒêi·ªÅu g√¨ th∆∞·ªùng khi·∫øn b·∫°n kh√≥ t·∫≠p trung? (ch·ªçn nhi·ªÅu)
              </Label>
              <div className="flex flex-wrap gap-2">
                {commonDistractions.map((distraction) => (
                  <Badge
                    key={distraction}
                    variant={data.distractionFactors.includes(distraction) ? "default" : "outline"}
                    className="cursor-pointer"
                    onClick={() => handleDistractionToggle(distraction)}
                  >
                    {distraction}
                  </Badge>
                ))}
              </div>
              <Input
                placeholder="Nguy√™n nh√¢n kh√°c..."
                value={data.customDistraction}
                onChange={(e) => setData(prev => ({ ...prev, customDistraction: e.target.value }))}
              />
            </div>

            <Button 
              type="submit" 
              className="w-full"
              disabled={!isValid}
            >
              Ti·∫øp t·ª•c ph√¢n t√≠ch ‚Üí
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};