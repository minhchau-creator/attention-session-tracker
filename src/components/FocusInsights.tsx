
import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Clock, TrendingUp, Lightbulb } from "lucide-react";

interface FocusInsightsProps {
  longestFocusStreak: number;
  sessionDuration: number;
  averageFocusScore: number;
}

export const FocusInsights: React.FC<FocusInsightsProps> = ({
  longestFocusStreak,
  sessionDuration,
  averageFocusScore
}) => {
  const formatTime = (minutes: number): string => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours > 0) {
      return `${hours} gi·ªù ${mins} ph√∫t`;
    }
    return `${mins} ph√∫t`;
  };

  const getInsights = (): string[] => {
    const insights: string[] = [];
    
    if (longestFocusStreak < 15) {
      insights.push("B·∫°n th∆∞·ªùng m·∫•t t·∫≠p trung sau 15 ph√∫t, h√£y th·ª≠ chia bu·ªïi h·ªçc th√†nh c√°c phi√™n 15p ngh·ªâ 5p.");
    } else if (longestFocusStreak < 25) {
      insights.push("B·∫°n th∆∞·ªùng m·∫•t t·∫≠p trung sau 20 ph√∫t, h√£y th·ª≠ chia bu·ªïi h·ªçc th√†nh c√°c phi√™n 20p ngh·ªâ 5p.");
    } else {
      insights.push("Kh·∫£ nƒÉng t·∫≠p trung c·ªßa b·∫°n r·∫•t t·ªët! H√£y duy tr√¨ nh·ªãp ƒë·ªô n√†y.");
    }

    if (averageFocusScore < 50) {
      insights.push("H√£y t√¨m m·ªôt m√¥i tr∆∞·ªùng y√™n tƒ©nh h∆°n ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô t·∫≠p trung.");
      insights.push("Th·ª≠ ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß tr∆∞·ªõc khi h·ªçc ƒë·ªÉ tƒÉng hi·ªáu qu·∫£.");
    } else if (averageFocusScore < 75) {
      insights.push("T·∫Øt c√°c thi·∫øt b·ªã g√¢y ph√¢n t√¢m nh∆∞ ƒëi·ªán tho·∫°i, m·∫°ng x√£ h·ªôi.");
      insights.push("Th·ª≠ k·ªπ thu·∫≠t Pomodoro ƒë·ªÉ t·ªëi ∆∞u h√≥a th·ªùi gian h·ªçc.");
    } else {
      insights.push("B·∫°n ƒë√£ c√≥ kh·∫£ nƒÉng t·∫≠p trung t·ªët, ti·∫øp t·ª•c duy tr√¨!");
    }

    return insights;
  };

  return (
    <div className="grid gap-6">
      {/* Th·ªëng k√™ n·ªïi b·∫≠t */}
      <div className="grid md:grid-cols-2 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Clock className="w-4 h-4" />
              ‚è±Ô∏è Th·ªùi gian t·∫≠p trung li√™n t·ª•c d√†i nh·∫•t
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {formatTime(longestFocusStreak)}
            </div>
            <p className="text-xs text-muted-foreground mt-1">
              {longestFocusStreak < 25 
                ? `C·ªë g·∫Øng ƒë·∫°t ${25} ph√∫t v√†o l·∫ßn sau!`
                : "Xu·∫•t s·∫Øc! B·∫°n ƒë√£ ƒë·∫°t m·ª•c ti√™u!"
              }
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <TrendingUp className="w-4 h-4" />
              üìä Hi·ªáu su·∫•t t·ªïng th·ªÉ
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">
              {averageFocusScore}%
            </div>
            <p className="text-xs text-muted-foreground mt-1">
              {averageFocusScore >= 75 ? "Tuy·ªát v·ªùi!" : 
               averageFocusScore >= 50 ? "Kh√° t·ªët" : "C·∫ßn c·∫£i thi·ªán"}
            </p>
          </CardContent>
        </Card>
      </div>

      {/* G·ª£i √Ω c·∫£i thi·ªán */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Lightbulb className="w-5 h-5" />
            üìù G·ª£i √Ω c·∫£i thi·ªán
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {getInsights().map((insight, index) => (
              <div key={index} className="flex items-start gap-3">
                <div className="w-2 h-2 rounded-full bg-blue-500 mt-2 flex-shrink-0"></div>
                <p className="text-sm">{insight}</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
